package labcqrssummarize;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import labcqrssummarize.domain.RequestPublishApproved;
import labcqrssummarize.domain.EBook;
import labcqrssummarize.domain.EBookRepository;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.test.annotation.DirtiesContext;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

import static java.lang.Thread.sleep;
import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@DirtiesContext
public class EBookAITest {

    @Value("${spring.kafka.bootstrap-servers:localhost:9092}")
    private String bootstrapServers;

    @Autowired
    private EBookRepository ebookRepository;

    private KafkaTemplate<String, byte[]> createKafkaTemplate() {
        Map<String, Object> props = new HashMap<>();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        ProducerFactory<String, byte[]> factory = new DefaultKafkaProducerFactory<>(props);
        return new KafkaTemplate<>(factory);
    }

    @Test
    public void testCreateEBookAndCheckDB() throws Exception {
        KafkaTemplate<String, byte[]> kafkaTemplate = createKafkaTemplate();

        // Í≥†Ïú†Ìïú ebookId ÏÉùÏÑ±
        String ebookId = "test-ebook-" + System.currentTimeMillis();

        // Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±
        RequestPublishApproved event = new RequestPublishApproved();
        event.setEbookId(ebookId);
        event.setAuthorId("test-author-001");
        event.setPublicationStatus(true);

        // JSON ÏßÅÎ†¨Ìôî Î∞è type ÌïÑÎìú Ï∂îÍ∞Ä
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode jsonNode = mapper.valueToTree(event);
        jsonNode.put("type", "RequestPublishApproved");
        String payload = mapper.writeValueAsString(jsonNode);

        // Kafka Ï†ÑÏÜ°
        kafkaTemplate.send("labcqrssummarize", payload.getBytes(StandardCharsets.UTF_8)).get();
        System.out.println("‚úÖ Kafka Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏôÑÎ£å: " + payload);

        // üëâ DB Î∞òÏòÅ ÎåÄÍ∏∞ (ÎπÑÎèôÍ∏∞ AI Ï≤òÎ¶¨ ‚Üí Kafka Ïù¥Î≤§Ìä∏ ‚Üí Ï†ÄÏû•ÍπåÏßÄ ÏßÄÏó∞ Í≥†Î†§)
        sleep(5000);  // 5Ï¥à ÎåÄÍ∏∞

        // ‚úÖ DB Ï°∞Ìöå Î∞è Í≤ÄÏ¶ù
        EBook result = ebookRepository.findById(ebookId).orElse(null);
        assertNotNull(result, "‚ùå EBook DBÏóê Ï†ÄÏû•ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
        assertNotNull(result.getSummary(), "‚ùå ÏöîÏïΩ Í≤∞Í≥ºÍ∞Ä ÎπÑÏñ¥ ÏûàÏäµÎãàÎã§.");
        assertNotNull(result.getCategory(), "‚ùå Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä ÎπÑÏñ¥ ÏûàÏäµÎãàÎã§.");
        assertTrue(result.getPrice() > 0, "‚ùå Í∞ÄÍ≤©Ïù¥ Ïò¨Î∞îÎ•¥Í≤å ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");

        System.out.println("‚úÖ DB Ï†ÄÏû• Í≤∞Í≥º ÌôïÏù∏ ÏôÑÎ£å: " + result);
    }
}
